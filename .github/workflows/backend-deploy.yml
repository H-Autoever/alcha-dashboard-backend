name: alcha-dashboard-backend CI/CD - Build and Push to ECR

on:
  push:
    branches:
      - main      # 메인 브랜치에 push 시 실행
    paths:
      - 'app/**'                                    # 백엔드 앱 코드 변경 시
      - 'requirements.txt'                          # Python 의존성 변경 시
      - 'Dockerfile'                                # Docker 설정 변경 시
      - '.github/workflows/backend-deploy.yml'      # 이 워크플로우 파일 변경 시

# 환경 변수 설정
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: alcha/dashboard-backend
  ECR_URL: ${{ secrets.ECR_URL }}

# 작업 정의의
jobs:
  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행
    
    steps:
      
      # Step 1: 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4  # GitHub 저장소의 코드를 가져옴
      # AWS 자격증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}        # GitHub Secrets에서 AWS 액세스 키 ID 가져오기
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # GitHub Secrets에서 AWS 시크릿 액세스 키 가져오기
          aws-region: ${{ env.AWS_REGION }}                          # 위에서 설정한 AWS 리전 사용
     
      # Amazon ECR 로그인인
      - name: Login to Amazon ECR
        id: login-ecr  # 이 단계의 출력을 다른 단계에서 사용할 수 있도록 ID 설정
        uses: aws-actions/amazon-ecr-login@v2  # ECR에 로그인하여 Docker 이미지 푸시 가능하게 함
      
      # Docker 이미지 빌드 및 ECR 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ env.ECR_URL }}  # ECR 레지스트리 URL (시크릿에서 가져옴)
          IMAGE_TAG: ${{ github.sha }}                           # Git 커밋 해시를 이미지 태그로 사용
        run: |
          # Docker 이미지 빌드 (커밋 해시 태그)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          # Docker 이미지 빌드 (latest 태그)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # ECR에 커밋 해시 태그 이미지 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # ECR에 latest 태그 이미지 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # 다음 단계에서 사용할 수 있도록 이미지 URI를 출력에 저장
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      # 빌드 결과 출력
      - name: Print image URI
        run: |
          echo "Docker image pushed successfully!"
          echo "Image URI: ${{ steps.build-image.outputs.image }}"
          echo "Latest tag: ${{ env.ECR_URL }}/${{ env.ECR_REPOSITORY }}:latest"

